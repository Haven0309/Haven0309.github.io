<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git命令简单使用]]></title>
    <url>%2F2019%2F02%2F16%2Fgit%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[（1）、拉取代码1）$ git clone &lt;版本库的网址&gt;该命令会在本地生成一个目录，与origin的版本库同名，要注意此时是在master分支上的，可以使用 2）$ git branch 命令查看当前分支！3）$ git checkout – b local 创建新分支该命令，基于dev分支，创建新分支 local,并切换到 local分支，一定要创建新分支进行开发，决不能基于本地dev分支开发，最后就可以将代码导入开发工具了！此时执行 $ git branch 命令应该可以看到 dev 和local 两个分支。 4）$ git checkout dev 切换到其他分支，切dev分支上的代码！该命令是将本地版本库（local）切换到dev分支(也可以使用 $ git checkout -b dev origin/dev命令代替) 5）$ git pull该命令将origin/dev分支上的代码，pull或更新到local/dev 分支上。 （2）、代码提交分析：如果一切正常，我们目前应该是在基于本地dev分支基础上创建的local分支上，前面已经说过，本地只有dev分支才能与服务器dev分支进行通信，执行代码的pull和push操作。那么我们要做的就是 将 local分支上的代码，提交到本地dev分支上，之后切换到dev分支，执行push命令，就ok了！！ 1）定位到项目的根目录（带.git的文件夹下），鼠标右击，点击“git Bash”，弹出命令框！！$ git status此命令可以查看当前分支上有哪些文件改动了，建议首先执行一下，查看改动的文件，避免提交不需要提交的文件。如果想恢复改动的文件，执行 $ git checkout — 文件路径/文件名 。 2）$git add .改命令将分支上改动的文件（即工作区改动文件），添加到暂存区$ git commit -m “修改说明”将暂存区的文件提交到版本库（我的理解这个版本库在这里应该指的是本地dev分支） 3）$ git checkout dev切换到本地dev分支$ git pull该命令将origin/dev分支上的代码，更新到local/dev 分支上。$ git checkout local该命令切换到本地local分支$ git rebase dev该命令将 dev分支上的最新代码，合并到 本地local分支上。此时很可能会遇到文件冲突的问题，需要到冲突所在的文件下手动修改，修改好后，执行 $ git add . 执行 $ git rebase –continue，此时应该可以成功合并。$ git push origin head:refs/for/dev此命令将本地local分支上修改的代码提交到服务器上。 配置SSHgit config –global user.name “用户名”git config –global user.email “邮箱”ssh-keygen -t rsa -C “邮箱”系统会提示生成证书文件名，回车默认名系统提示输入密码，回车默认进入查看是否生成文件：cd ~/.ssh/把生成的（id_rsa.pub）公钥复制到githup的，settings下面的SSH and GPG keys里面 new SSH keys验证：ssh -T git@githup.com 提交代码到局域网gitLab1、创建版本库初始化1)、git initReinitialized existing Git repository in D:/workspace/idea/spark-test/.git/ 用命令git add告诉Git，把文件添加到仓库：2)、git add .warning: LF will be replaced by CRLF in src/main/scala/sql/SparkSQLExample.scala.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/compiler.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/encodings.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/misc.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/modules.xml.… 提交3)、git commit -m “all is new”[master (root-commit) 521cf14] all is newwarning: LF will be replaced by CRLF in .idea/compiler.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/encodings.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/misc.xml.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in .idea/modules.xml. 2、提交到远程仓库1)、#添加远程仓库git remote add origin https://github.com/HanlaoTwo/SparkStudy.git #报错，已存在fatal: remote origin already exists. 2)、#删除git remote rm origin 3)、#再添加git remote add origin https://github.com/HanlaoTwo/SparkStudy.git 4)、#提交git push -u origin masterUsername for ‘https://github.com&#39;: hanlaotwoPassword for ‘https://hanlaotwo@github.com&#39;:Counting objects: 294, done.Delta compression using up to 4 threads.Compressing objects: 100% (279/279), done.Writing objects: 99% (292/294), 1.10 MiB | 68.00 KiB/s 报错：账户密码错误，去掉密码重新输入git config –system –unset credential.helper 简单提交代码操作$git add .$ git commit -m “修改说明”$ git push]]></content>
  </entry>
  <entry>
    <title><![CDATA[spring boot开发脚手架]]></title>
    <url>%2F2019%2F02%2F14%2Fspring-boot%E5%BC%80%E5%8F%91%E8%84%9A%E6%89%8B%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[玉柴中台上线后，为了减少培训和推广中台技术架构，本人特意为简化spring boot的开发，研发了一个开发脚手架，下面是简单的使用手册。 快速开始添加框架依赖1234567891011&lt;dependency&gt; &lt;groupId&gt;com.yuchai&lt;/groupId&gt; &lt;artifactId&gt;yuchai-framework-starter-common&lt;/artifactId&gt; &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.yuchai&lt;/groupId&gt; &lt;artifactId&gt;yuchai-framework-starter-mybatisplus&lt;/artifactId&gt; &lt;version&gt;2.1.2.RELEASE&lt;/version&gt;&lt;/dependency&gt; 这两个框架的简单介绍：1、common包是通用是一下功能组件，包括：通一异常处理，日志，swagger接口文档集成，附件上传，jwt鉴权，excel导入导出，@RequestAttribute(“currentUser”)获取当前登录人，@UserLoginToken注解接口需要登录的访问控制，集成企业微信2、mybatisplus包是集成了mybatis的增强功能，主要是集成mybatis，接口的方式生成代码3、如果要集成到玉柴中台系统 配置玉柴maven私有仓库由于框架依赖没有发布到maven中央仓库，所以必须配置玉柴私有仓库,maven才能下载jar包成功1234567891011121314&lt;repositories&gt; &lt;!-- 配置nexus远程仓库 --&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;url&gt;http://172.16.90.84:8081/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; yml配置数据源数据源配置支持动态数据源、多数据源配置，如果你使用的是mysql，则mysql主从的配置如下123456789101112131415161718192021222324spring: datasource: dynamic: primary: master #设置默认的数据源或者数据源组,默认值即为master datasource: master: username: root password: 123456 driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://xx.xx.xx.xx:3306/dynamic output-dir: D://workingSpace//idea//demo2//src//main//java #自动生成代码路径 base-package: com.example.demo #包路径 slave_1: username: root password: 123456 driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://xx.xx.xx.xx:3307/dynamic slave_2: username: root password: 123456 driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://xx.xx.xx.xx:3308/dynamic #......省略 #以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2 如果你使用的是oracle数据库，则配置如下：123456789101112spring: datasource: dynamic: primary: oracle datasource: oracle: username: SRM password: SRM url: jdbc:oracle:thin:@172.16.135.41:1521/ndb2 driver-class-name: oracle.jdbc.driver.OracleDriver output-dir: D://workingSpace//idea//demo2//src//main//java base-package: com.example.demo 同时还支持mysql和oracle混合配置。更多请参考官方文档: Server 配置mybatis的mapper包扫描路径为了使mybatis配置生效，必须在启动类配置mybatis的mapper扫描路径@MapperScan(“com.example..mapper“)123456789@SpringBootApplication@MapperScan(&quot;com.example.*.mapper*&quot;)public class YuchaiDemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(YuchaiDemoApplication.class, args); &#125;&#125; 运行项目配置好后即可运行项目，访问http://localhost:8080/swagger-ui.html地址进行mybatis自动代码生成。 根据你的数据源类型选择mysql还是oracle接口执行mybatis自动生成接口，输入参数是数据库表名称数组：例如 tb_role,tb_user 测试进行controller的业务接口开发，并登陆http://localhost:8080/swagger-ui.html进行测试]]></content>
      <tags>
        <tag>spring boot，java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java]]></title>
    <url>%2F2019%2F02%2F12%2Fjava%2F</url>
    <content type="text"><![CDATA[这个是测试页面,admin]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
